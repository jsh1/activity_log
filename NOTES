[ This is -*- indented-text -*- ]

## Common Fields

Date: YYYY-MM-DD HH:MM:SS [AM|PM] [TZ]
Activity: STRING			-- run | bike | note | ...
Type: STRING				-- easy | ...
Course: STRING
Keywords: KEYWORD-LIST			-- mile-reps
Equipment: KEYWORD-LIST			-- nike-lunar-montreal-grey
Distance: DISTANCE			-- 8.3 miles
Duration: DURATION			-- 1:05:10.4
Pace: PACE				-- 7:10/mi
Speed: SPEED				-- 10 m/s
Max-Pace: PACE
Max-Speed: SPEED
Resting-HR: NUMBER
Average-HR: NUMBER
Max-HR: NUMBER
Calories: NUMBER
Weight: NUMBER UNIT			-- 150 pounds
Temperature: TEMPERATURE		-- 28C
Weather: KEYWORD-LIST			-- cloudy drizzle
Quality: FRACTION
Effort: FRACTION
GPS-File: FILENAME			-- 2013-06-26-09-36-12.fit

So semantic field types are:

	Name		Format			Unit
	----		------			----
	DATE
	DISTANCE	NNN DISTANCE-UNIT	m
	DURATION	[[HH:]MM:]SS[.SS]	s
	PACE		DURATION PACE-UNIT	m/s
	SPEED		DISTANCE SPEED-UNIT	m/s
	TEMPERATURE	NNN TEMPERATURE-UNIT	deg C
	KEYWORD-LIST	KEY1 KEY2 ... KEY-N
	FRACTION	N/N, N%

almost using SI units, but C not Kelvin.

Minor format pieces are:

	DISTANCE-UNIT		mi|mile[s], kilometres|km, metres|m, feet|ft
	PACE-UNIT		/DISTANCE-UNIT
	SPEED-UNIT		DISTANCE-UNIT / [s|m|h], mph
	TEMPERATURE-UNIT	[degrees] c[elsius]|f[ahrenheit]

## Example entry

--
From jsh				-- mbox start line
Date: 2013-06-26 09:36:12 -0900
Course: Mission Bay
Activity: run
Type: easy
Distance: 6.28 miles
Duration: 51:20	
GPS-File: 2013-06-26-09-36-12.fit

Felt good, slightly sore left hip.

Easy run around the bay path, nice day to be out and about.
--

this is ~270 bytes. Let's say 500 bytes per entry. For 400 entries per
year, that is 200KB. So concatenating entries into one file does not
seem unreasonable, although that might be a bit much for Dropbox to
sync every time?

So best place to start may be with one file per activity, load them all
into memory on startup, then optimize as necessary from there.

## Shell Command

Skip GUI app for now. Just write a suite of shell commands with a
common interface, kind of like how git works. Basic command structure:

$ act [--dir DIR] [--gps-dir DIR] COMMAND ARGS...

The --dir and --gps-dir options are used to set ACT_DIR and ACT_GPS_DIR
environment variables if given. Each command is a separate program
called act-COMMAND. Some possible commands are:

$ act new [--edit] [CREATION-OPTIONS...]

	Creates a new activity file. If no --date option, defaults to
	current time. (Date: is only required header.) If --edit
	option is specified launches editor on initial file.

$ act import [--edit] [CREATION-OPTIONS...]

	Finds new Garmin files and creates activities from them. (I.e.
	calls "act new" with --fit-file option.)

$ act set [--multiple] [CREATION-OPTIONS] [ACTIVITY-SPEC ...]

	Uses the options to change the specified activity. If the spec
	selects more than one activity exit with an error unless
	--multiple option was given.

where CREATION-OPTIONS are any of:

	--date DATE
	--activity X
	--type X
	--course X
	--keywords X[,Y]
	--equipment X[,Y]
	--distance X
	--duration X
	--pace X
	--speed X
	--max-pace X
	--max-speed X
	--resting-hr X
	--average-hr X
	--max-hr X
	--calories X
	--weight X
	--temperature X[,Y]
	--weather X
	--quality X
	--effort X
	--fit-file X
	--tcx-file X
	--field TAG=X

For identifying activities we have ACTIVITY-SPEC, which is one of these
forms:

	DATE
	DATE-ABBREV		-- "today", "this-week", "last-week", etc
	#10			-- date of 10th most recent activity

given a single item spec like this we can concatenate to form a range, e.g.

	DATE0..DATE1
	#10..#20

or ask for N items from that point:

	DATE@20
	@20			-- 20 most recent items (gdb syntax!)

note that underspecified dates already form a range, e.g. "2013-07" is
the entire month of July, and "12pm" is [12:00, 13:00). Combining two
dates to form a range does the obvious thing (min/max of endpoints).
Adding two ranges preserves the hole between them. If no spec is given,
the command operates on the most recent activity.

$ act edit [ACTIVITY-SPEC ...]

	Runs $EDITOR on the specified file(s).

$ act log [LOG-OPTIONS...] [ACTIVITY-SPEC ...]

	Prints activities. The options allow the range of activities,
	and what is printed to be controlled.

$ act show [LOG-OPTIONS...] [ACTIVITY-SPEC ...]

	Prints one activity.

$ act summary [SUMMARY-OPTIONS...] ACTIVITY-SPEC

	Summarizes a range of activities. E.g. prints weekly mileage
	for the past year.

$ act locate [ACTIVITY-SPEC ...]

	Prints file names for all specified activities.

$ act rm [ACTIVITY-SPEC ...]

	Deletes specified activities. Note that this is a "soft"
	deletion, either by adding a "Deleted: YES" header to the file,
	or by moving it to a trash directory.

$ act gc

	Removes any deleted files, and does any other cleanup that
	might be needed.

